/*---- udon parser header/api - automatically generated by genmachine ----*/
#ifndef __UDON_H__
#define __UDON_H__ 1
#ifndef __cplusplus
extern "C" {
#endif

/* --- Allow setting different malloc/free routines --- */
#ifdef _UDON_NONSTANDARD_MEMORY
void *udon_calloc(size_t count, size_t size);
void *udon_malloc(size_t size);
void  udon_free(void *ptr, size_t size);
#else

#define udon_calloc(count,size) calloc(count,size)
#define udon_malloc(size)       malloc(size)
#define udon_free(ptr,size)     free(ptr)
#endif

/* --- Error values --- */
#include <sysexits.h>
#define UDON_OK             EX_OK
#define UDON_MEMORY_ERR     EX_OSERR
#define UDON_FILE_OPEN_ERR  EX_NOINPUT
#define UDON_FILE_READ_ERR  EX_IOERR
#define UDON_DATA_ERR       EX_DATAERR

/* --- Global parser error state --- */
extern int udon_global_error;
extern char udon_global_error_msg[128];

/* --- For hash tables --- */

struct GmEntry {
    char *key;
    void *value;
    unsigned int _used;
};
typedef struct GmEntry GmEntry;

struct GmDict {
    GmEntry *table;
    uint64_t size;
    unsigned int filled;
};
typedef struct GmDict GmDict;


/* TODO:
 *  - Linked Lists if needed
 *  - Hash tables if needed
 *  - Strings if needed (can't imagine them not being needed)
 *  - Types / enums as per the source
 *  - Public prototypes
 *
 */


struct UdonGmString {
    char *                       start;
    uint64_t                     length;
};
typedef struct UdonGmString      UdonGmString;


struct UdonGmList {
    void *                       v;
    struct UdonList *            next;
};
typedef struct UdonGmList        UdonGmList;


struct UdonGmDict {
    UdonGmList                   keys;
    UdonGmList                   _keys__tail;
    struct hsearch_data *        table;
    uint64_t                     size;
    uint64_t                     allocated;
};
typedef struct UdonGmDict        UdonGmDict;



enum UdonNodeType {
    UDON_ROOT,
    UDON_BLANK,
    UDON_VALUE,
    UDON_FULL
};
typedef enum UdonNodeType        UdonNodeType;



struct UdonNode {
    UdonGmList                   _base;

    UdonNodeType                 node_type;
    uint64_t                     source_line;
    uint64_t                     source_column;
};
typedef struct UdonNode          UdonNode;



struct UdonFullNode {
    UdonNode                     _base;

    UdonNode *                   children;
    UdonNode *                   _children__tail;
    UdonGmString *               name;
    UdonGmString *               id;
    UdonGmList *                 classes;
    UdonGmList *                 _classes__tail;
    UdonGmDict *                 attributes;
};
typedef struct UdonFullNode      UdonFullNode;





#ifdef __cplusplus
}
#endif
#endif
